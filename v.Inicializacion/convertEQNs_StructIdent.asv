clear 
clc

modelName = 'CRN.jl';

% Crear archivo para almacenar la ode de modelName
[~, nombreFuncion, ~] = fileparts(modelName);
fid = fopen(nombreFuncion + ".m", "w");
if fid == -1
    error("Parece que no funciona");
end

% Leer el contenido del archivo .jl
filetext = fileread(modelName);

% Esto construye un string que sea igual a ode = @ODEmodel( ... )sin importar
% los espacios y se queda con lo de dentro
expr = 'ode\s*=\s*@ODEmodel\s*\(([\s\S]*)';
odes = regexp(filetext, expr, 'tokens', 'dotall');

if ~isempty(odes)
    contenido_odes = odes{1}{1};
else
    error('No se encontró un bloque @ODEmodel en el archivo.');
end

% Separar las ecuaciones individuales que están separadas por comas
lineas = strsplit(contenido_odes, ',');

% 
for idx = 1:length(lines)

    % Con esto quiero eliminar espacios en blanco, al principio o al final
    % de cada línea
    line = strtrim(lines{idx});
    % Si hubiera una línea vacía entre las ecuaciones
    if isempty(line)
        continue;
    end
    

    % Reemplaza derivadas P'(t) por dPdt, T'(t) por dTdt, etc.
    line = regexprep(line, "(\w+)'\(t\)", 'd$1dt');

    % Reemplazar variables de tiempo P(t) por P
    line = regexprep(line, '(\w+)\(t\)', '$1');

    % Escribir la línea transformada en el archivo .m
    fprintf(fid, '%s;\n', line);
end

% Cerrar archivo
fclose(fid);

disp(['Archivo transformado guardado como: ', nombreFuncion, '.m']);